/*
<NAME> lowlink
<TRIGGER> lowlink
<TAG> graph, 橋, 関節点
<*NOTE>
lowlinkを求める O(|V|)
<*CODE> */
vector<vector<int>> g;
vector<bool> used_v, used_e;
vector<int> ord, lowlink;
int k = 0;
void dfs(int v) {
    used[v] = true;
    ord[v] = lowlink[v] = k++;
    for (int w : g[v]) {
        if (!used_v[w]) {
            used_e[v][w] = true;
            dfs(w);
            lowlink[v] = min(lowlink[v], lowlink[w]);  // lowlink[w]は計算済み
        } else if (!used_e[w][v]) {
            // v --> w は後退辺
            lowlink[v] = min(lowlink[v], ord[w]);  // 後退辺を辿った先のordで更新(1度までしか後退辺を辿ることはできない)
        }
    }
}

/*
橋の検出
1. ord, lowlinkを求めておく
2. e(v, w)について、ord[v] < lowlink[w]なら橋
ord[v] < lowlink[w]のとき、vの子孫からvの祖先へ辿る後退辺が存在しないので、v --> wを取り除くとvの祖先とwの部分木に別れる。

関節点の検出
1. ord, lowlinkを求めておく
2. vの子wについてord[v] <= lowlink[w]となるものが存在するならvは関節点
vの子wについてord[v] <= lowlink[w]ならばwからvの祖先へ辿るにはw-->vを通る必要がある。
よってvを消すと辿るパスがなくなり、非連結となる。
*/