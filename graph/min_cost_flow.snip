/*
<NAME> 最小費用流
<TRIGGER> MinCostFlow
<TAG> ネットワークフロー, 最小費用流, graph
<*NOTE>

- $O(F・|V|・|E|)$
- `add_edge`で辺を追加して、`min_cost`で最小費用流を得る。

<*CODE> */
struct MinCostFlow {
    struct edge { int to, cap, cost, rev; };
    int V;
    vector<vector<edge>> G;
    vector<int> dist;
    vector<int> prevv, preve;

    MinCostFlow(int V) : V(V), G(V), dist(V), prevv(V), preve(V) {}

    // fromからtoへ向かう容量cap、コストcostの辺をグラフに追加する
    void add_edge(int from, int to, int cap, int cost) {
        G[from].push_back((edge){to, cap, cost, (int)G[to].size()});
        G[to].push_back((edge){from, 0, -cost, (int)G[from].size() - 1});
    }

    // sからtへの流量fの最小費用流を求める
    // 流せない場合は-1を返す
    int min_cost(int s, int t, int f) {
        int res = 0;
        while (f > 0) {
            // ベルマンフォード法により、s-t間最短路を求める
            fill(begin(dist), begin(dist) + V, INF);
            dist[s] = 0;
            bool update = true;
            while (update) {
                update = false;
                for (int v = 0; v < V; ++v) {
                    if (dist[v] == INF) continue;
                    for (int i = 0; i < (int)G[v].size(); ++i) {
                        edge &e = G[v][i];
                        if (e.cap > 0 && dist[e.to] > dist[v] + e.cost) {
                            dist[e.to] = dist[v] + e.cost;
                            prevv[e.to] = v;
                            preve[e.to] = i;
                            update = true;
                        }
                    }
                }
            }

            if (dist[t] == INF) {
                // これ以上流せない
                return -1;
            }

            // s-t間最短路に沿って目一杯流す
            int d = f;
            for (int v = t; v != s; v = prevv[v]) {
                d = min(d, G[prevv[v]][preve[v]].cap);
            }
            f -= d;
            res += d * dist[t];
            for (int v = t; v != s; v = prevv[v]) {
                edge &e = G[prevv[v]][preve[v]];
                e.cap -= d;
                G[v][e.rev].cap += d;
            }
        }
        return res;
    }
};
