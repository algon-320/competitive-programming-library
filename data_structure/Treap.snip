<NAME> Treap
<TRIGGER> Treap
<TAG> data-structure, binary-search-tree
<*NOTE>
- 列として使うときはTrepArray、setとして使うときはTreapOrderedSet
<*CODE>
template <typename Monoid>
class Treap {
protected:
    using T = typename Monoid::T;
    struct Node {
        T val;
        T data;
        bool cached;
        Node *left, *right;
        int priority;
        size_t size;
        Node(T val) : val(val), data(val), cached(true), size(1) {
            priority = rand();
            left = right = nullptr;
        }
        ~Node() { delete left; delete right; }
    };

    Node *root;
    Treap(Node *n) : root(n) {}

public:
    Treap() : root(nullptr) {}
    virtual ~Treap() { delete root; }

    Node *get_root() { return root; }
    
    size_t size() { return size(root); }

    // [L, R)
    T query(size_t L, size_t R) {
        size_t len = R - L;
        Node *l, *m, *r;
        tie(l, r) = split(root, L);
        tie(m, r) = split(r, len);
        T ret = eval(m);
        r = merge(m, r);
        root = merge(l, r);
        return ret;
    }

    void insert(size_t k, T val) {
        root = insert(root, k, val);
    }

    void erase(size_t k) {
        root = erase(root, k);
    }
    
    T find(size_t k) { 
        return find(root, k)->val;
    }
    
    static size_t size(Node *v) {
        return !v ? 0 : v->size;
    }

    static Node *update(Node *v) {
        if (!v) return nullptr;
        v->size = size(v->left) + size(v->right) + 1;
        v->data = eval(v);
        return v;
    }

    static T eval(Node *v) {
        if (!v) return Monoid::identity;
        if (v->cached) return v->data;
        T l = Monoid::identity, r = Monoid::identity;
        if (v->left) l = eval(v->left);
        if (v->right) r = eval(v->right);
        v->data = Monoid::op(v->val, Monoid::op(l, r));
        v->cached = true;
        return v->data;
    }

    static Node *merge(Node *l, Node *r) {
        if (!l or !r)
            return l ? l : r;
        if (l->priority > r->priority) {
            l->right = merge(l->right, r);
            l->cached = false;
            return update(l);
        } else {
            r->left = merge(l, r->left);
            r->cached = false;
            return update(r);
        }
    }
    // [0, k), [k, n)
    static pair<Node*, Node*> split(Node *v, size_t k) {
        if (!v) return {nullptr, nullptr};
        size_t ls = size(v->left);
        if (k <= ls) {
            auto s = split(v->left, k);
            v->left = s.second;
            v->cached = false;
            return {s.first, update(v)};
        } else {
            auto s = split(v->right, k - ls - 1);
            v->right = s.first;
            v->cached = false;
            return {update(v), s.second};
        }
    }

    // [0, l) [l, r) [r, n)
    static tuple<Node*, Node*, Node*> split(Node *v, size_t l, size_t r) {
        Node *left, *middle, *right;
        tie(middle, right) = split(v, r);
        tie(left, middle) = split(middle, l);
        return make_tuple(left, middle, right);
    }
    static Node* merge(initializer_list<Node*> l) {
        if (l.size() == 0) return nullptr;
        auto ret = *begin(l);
        for (auto itr = next(begin(l)); itr != end(l); itr++) {
            ret = merge(ret, *itr);
        }
        return ret;
    }

    static Node *insert(Node *t, size_t k, T val) {
        auto s = split(t, k);
        t = merge(s.first, new Node(val));
        t = merge(t, s.second);
        return update(t);
    }

    static Node *erase(Node *t, size_t k) {
        Node *l, *m, *r;
        tie(l, m, r) = split(t, k, k + 1);
        t = merge(l, r);
        delete m;
        return update(t);
    }

    static Node *find(Node *t, size_t k) {
        size_t ls = size(t->left);
        if (ls == k) return t;
        if (k < ls) return find(t->left, k);
        return find(t->right, k - ls - 1);
    }
};

template <typename Monoid>
class TreapArray : public Treap<Monoid> {
    using T = typename Monoid::T;
public:
    TreapArray() : Treap<Monoid>() {}
    TreapArray(size_t n) : Treap<Monoid>() {
        for (int i = 0; i < n; i++)
            this->push_back(Monoid::identity);
    }
    void change(size_t p, T value) {
        this->erase(p);
        this->insert(p, value);
    }
    void push_back(const T& value) { this->insert(this->size(this->root), value); }
    void push_front(const T& value) { this->insert(0, value); }
    void pop_back() { this->erase(this->size(this->root) - 1); }
    void pop_front() { this->erase(0); }
    T back() { return this->find(this->size(this->root) - 1); }
    T front() { return this->find(0); }
};

template <typename Monoid>
class TreapOrderedSet : public Treap<Monoid> {
    using T = typename Monoid::T;
    using Node = typename Treap<Monoid>::Node;
public:
    TreapOrderedSet() : Treap<Monoid>() {}
    TreapOrderedSet(Node *n) : Treap<Monoid>(n) {}
    
    pair<TreapOrderedSet, TreapOrderedSet> split_less(const T &x) {
        auto p = split(this->root, x, false);
        return {TreapOrderedSet(p.first), TreapOrderedSet(p.second)};
    }
    pair<TreapOrderedSet, TreapOrderedSet> split_leq(const T &x) {
        auto p = split(this->root, x, true);
        return {TreapOrderedSet(p.first), TreapOrderedSet(p.second)};
    }
    static pair<Node*, Node*> split(Node *n, const T &x, bool leq) {
        if (n == nullptr) return {nullptr, nullptr};
        if (n->val < x || (leq && n->val == x)) {
            auto p = split(n->right, x, leq);
            n->right = p.first;
            return {update(n), p.second};
        } else {
            auto p = split(n->left, x, leq);
            n->left = p.second;
            return {p.first, update(n)};
        }
    }

    void insert(const T &x) { this->root = insert(this->root, x); }
    static Node *insert(Node *n, const T &x) {
        auto p = split(n, x, false);
        return merge(merge(p.first, new Node(x)), p.second);
    }

    void erase_one(const T &x) {
        assert(contains(this->root, x));
        this->root = erase_one(this->root, x);
    }
    static Node *erase_one(Node *n, const T &x) {
        Node *l, *m, *r;
        tie(l, r) = split(n, x, false);
        tie(m, r) = split(r, 1);
        return merge(l, r);
    }

    void erase_all(const T &x) { this->root = erase_all(this->root, x); }
    static Node *erase_all(Node *n, const T &x) {
        Node *l, *m, *r;
        tie(l, r) = split(n, x, false);
        tie(m, r) = split(r, x, true);
        return merge(l, r);
    }

    size_t count_less(const T &x) { return count(this->root, x, false); }
    size_t count_leq(const T &x) { return count(this->root, x, true); }
    size_t count(const T &x) { return count_leq(x) - count_less(x); }
    static size_t count(const Node *n, const T &x, bool leq) {
        if (n == nullptr) return 0;
        if (n->val < x || (leq && n->val == x)) {
            return size(n->left) + 1 + count(n->right, x, leq);
        } else {
            return count(n->left, x, leq);
        }
    }

    bool contains(const T &x) { return contains(this->root, x); }
    static bool contains(const Node *n, const T &x) {
        if (n == nullptr) return false;
        if (n->val < x) {
            return contains(n->right, x);
        } else if (n->val == x) {
            return true;
        } else {
            return contains(n->left, x);
        }
    }

    T lower_bound(const T &x) { return lower_bound(this->root, x)->val; }
    static Node *lower_bound(Node *n, const T &x) {
        if (n == nullptr) return nullptr;
        if (n->val < x) {
            return lower_bound(n->right, x);
        } else {
            Node *res = lower_bound(n->left, x);
            return res ? res : n;
        }
    }

    T upper_bound(const T &x) { return upper_bound(this->root, x)->val; }
    static Node *upper_bound(Node *n, const T &x) {
        if (n == nullptr) return nullptr;
        if (n->val <= x) {
            return upper_bound(n->right, x);
        } else {
            Node *res = upper_bound(n->left, x);
            return res ? res : n;
        }
    }
};