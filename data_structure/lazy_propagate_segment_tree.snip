/*
<NAME> Lazy Propagate Segment Tree
<TRIGGER> LazySeg
<TAG> data-structure
<*NOTE>
更新$O(log N)$、クエリO(log N)。

- `update_func`: 更新時に使われる関数
- `merge_func`: クエリの計算に使われる関数
- `propagate_func`: lazyの伝搬に使われる関数

<*CODE> */
template <class T>
struct LazySegmentTree {
    using elem_t = typename T::T;

    int size;
    vector<elem_t> data;
    vector<elem_t> lazy;
    vector<int> width;

    LazySegmentTree(int n)
    : size(calc_size(n)),
      data(size * 2, T::query_identity()), lazy(size * 2, T::prop_identity()), width(size * 2, 1) {
        for (int i = size - 2; i >= 0; --i) {
            width[i] = width[i * 2 + 1] + width[i * 2 + 2];
        }
    }
    template <class Itr>
    LazySegmentTree(Itr l, Itr r) : size(calc_size(distance(l, r))),
     data(size * 2, T::query_identity()), lazy(size * 2, T::prop_identity()), width(size * 2) {
        auto itr = l;
        for (int i = size - 1; i < size * 2 - 1; ++i) {
            if (itr != r) {
                data[i] = *itr;
                itr++;
            } else {
                data[i] = T::query_identity();
            }
            width[i] = 1;
        }
        for (int i = size - 2; i >= 0; --i) {
            width[i] = width[i * 2 + 1] + width[i * 2 + 2];
            data[i] = T::merge(data[i * 2 + 1], data[i * 2 + 2]);
        }
    }

    void lazy_propagate(int p) {
        if (lazy[p] == T::prop_identity()) return;
        data[p] = T::update(data[p], lazy[p], width[p]);
        if (p < size - 1) {
            lazy[p * 2 + 1] = T::prop(lazy[p * 2 + 1], lazy[p]);
            lazy[p * 2 + 2] = T::prop(lazy[p * 2 + 2], lazy[p]);
        }
        lazy[p] = T::prop_identity();
    }
    void update(int wishL, int wishR, elem_t x, int watchL = 0, int watchR = -1, int k = 0) {
        if (watchR == -1) watchR = size;
        if (wishR <= watchL || watchR <= wishL) {
            lazy_propagate(k);
            return;
        }
        if (wishL <= watchL && watchR <= wishR) {
            lazy[k] = T::prop(lazy[k], x);
            lazy_propagate(k);
            return;
        }

        int mid = (watchL + watchR) / 2;
        lazy_propagate(k);
        update(wishL, wishR, x, watchL, mid, k * 2 + 1);
        update(wishL, wishR, x, mid, watchR, k * 2 + 2);
        data[k] = T::merge(data[k * 2 + 1], data[k * 2 + 2]);
    }
    elem_t query(int wishL, int wishR, int watchL = 0, int watchR = -1, int k = 0) {
        if (watchR == -1) watchR = size;
        if (watchR <= wishL || wishR <= watchL) return T::query_identity();
        if (wishL <= watchL && watchR <= wishR) {
            lazy_propagate(k);
            return data[k];
        }
        lazy_propagate(k);
        elem_t ld = query(wishL, wishR, watchL, (watchL + watchR) / 2, k * 2 + 1);
        elem_t rd = query(wishL, wishR, (watchL + watchR) / 2, watchR, k * 2 + 2);
        return T::merge(ld, rd);
    }

private:
    int calc_size(int n) {
        int ret = 1;
        while (ret < n) ret <<= 1;
        return ret;
    }
};

/*
struct RangeAddRangeSum {
    using T = int;
    static T update(T oldv, T newv, int seg_width) {
        dump(oldv, newv, seg_width);
        return oldv + newv * seg_width;
    }
    static T prop_identity() {
        return 0;
    }
    static T prop(T oldv, T newv) {
        return oldv + newv;
    }
    static T query_identity() {
        return 0;
    }
    static T merge(T l, T r) {
        return l + r;
    }
};

struct RangeUpdateRangeMinimum {
    using T = int;
    static T update(T oldv, T newv, int seg_width) {
        return newv;
    }
    static T prop_identity() {
        return -1;
    }
    static T prop(T oldv, T newv) {
        return newv;
    }
    static T query_identity() {
        return (1LL << 31) - 1;
    }
    static T merge(T l, T r) {
        return min(l, r);
    }
};

struct RangeAddRangeMinimum {
    using T = int;
    static T update(T oldv, T newv, int seg_width) {
        return oldv + newv;
    }
    static T prop_identity() {
        return 0;
    }
    static T prop(T oldv, T newv) {
        return oldv + newv;
    }
    static T query_identity() {
        return INF;
    }
    static T merge(T l, T r) {
        return min(l, r);
    }
};
*/
