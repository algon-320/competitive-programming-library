/*
<NAME> SparseTable
<TRIGGER>
<TAG> data-structure
<*NOTE>
構築$O(N \log N)$、クエリ$O(1)$。
<*CODE> */
template <class T>
struct SparseTable {
    vector<vector<T>> st;
    vector<int> lut;
    SparseTable(const vector<T> &v) {
        int b = 0;
        while ((1 << b) <= v.size()) ++b;
        st.assign(b, vector<T>(1 << b));
        for (int i = 0; i < v.size(); ++i) {
            st[0][i] = v[i];
        }
        for (int i = 1; i < b; ++i) {
            for (int j = 0; j + (1 << i) <= (1 << b); ++j) {
                st[i][j] = min(st[i - 1][j], st[i - 1][j + (1 << (i - 1))]);
            }
            lut.assign(v.size() + 1, 0);
            for (int i = 2; i < lut.size(); ++i) {
                lut[i] = lut[i >> 1] + 1;
            }
        }
    }
    // [l, r)
    T range_minimum_query(int l, int r) {
        int b = lut[r - l];
        return min(st[b][l], st[b][r - (1 << b)]);
    }
};
