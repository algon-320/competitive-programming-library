/*
<NAME> SegmentTree
<TRIGGER> SegmentTree
<TAG> data-structure
<*NOTE>
更新$O(log N)$、クエリ$O(log N)$。
<*CODE> */
template <class Monoid>
class SegmentTree {
    using T = typename Monoid::T;
    int size;
    vector<T> data;
    void build() {
        for (int i = size - 1; i > 0; --i)
            data[i] = Monoid::op(data[i << 1], data[i << 1 | 1]);
    }
public:
    SegmentTree(int n) {
        size = 1;
        while (size < n) size <<= 1;
        data.assign(size << 1, Monoid::identity());
    }
    template <class InputIt>
    SegmentTree(InputIt first, InputIt last) : SegmentTree(std::distance(first, last)){
        copy(first, last, std::begin(data) + size);
        build();
    }

    // 0-indexed
    void update(int p, const T &value) {
        for (data[p += size] = value; p >>= 1; ) data[p] = Monoid::op(data[p << 1], data[p << 1 | 1]);
    }
    // [l, r)  0-indexed
    T query(int l, int r) {
        T resl = Monoid::identity(), resr = Monoid::identity();
        for (l += size, r += size; l < r; l >>= 1, r >>= 1) {
            if (l & 1) resl = Monoid::op(resl, data[l++]);
            if (r & 1) resr = Monoid::op(data[--r], resr);
        }
        return Monoid::op(resl, resr);
    }
    // 0-indexed
    T get(int p) {
        return data[p + size];
    }
};

struct RMQ {
    using T = int;
    static T op(T a, T b) { return min(a, b); }
    static constexpr T identity() { return (1LL << 31) - 1; }
};

struct RSQ {
    using T = int;
    static T op(T a, T b) { return a + b; }
    static constexpr T identity() { return 0; }
};
