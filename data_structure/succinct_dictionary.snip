/*
<NAME> 簡潔ビットベクトル
<TRIGGER>
<TAG> data-structure, 簡潔データ構造
<*NOTE>

<*CODE> */
template <unsigned int SIZE>
class SBV {
    using ull = unsigned long long;
    using uc  = unsigned char;
public:
    SBV() {
        for (int i = 0; i < SIZE / 64 + 1; i++) {
            data[i] = 0ULL;
            sum[i] = 0;
        }
    }
    void set(int i) {
        data[i / 64] |= 1ULL << (i % 64);
    }
    bool get(int i) const {
        return (data[i / 64] >> (i % 64)) & 1;
    }
    void build() {
        sum[0] = 0;
        for (int i = 0; i < SIZE / 64; i++) {
            sum[i + 1] = sum[i] + popcnt64(data[i]);
        }
    }
    int rank(int i) const {
        ull m = (1ULL << (i % 64 + 1)) - 1;
        if (i == 63) { m = -1; }
        return sum[i / 64] + popcnt64(data[i / 64] & m);
    }

private:
    ull data[SIZE / 64 + 1];
    uc sum[SIZE / 64 + 1];

    int popcnt64(ull x) const {
        x = (x & 0B0101010101010101010101010101010101010101010101010101010101010101)
         + ((x & 0B1010101010101010101010101010101010101010101010101010101010101010) >> 1);
        x = (x & 0B0011001100110011001100110011001100110011001100110011001100110011)
         + ((x & 0B1100110011001100110011001100110011001100110011001100110011001100) >> 2);
        x = (x & 0B0000111100001111000011110000111100001111000011110000111100001111)
         + ((x & 0B1111000011110000111100001111000011110000111100001111000011110000) >> 4);
        x = (x & 0B0000000011111111000000001111111100000000111111110000000011111111)
         + ((x & 0B1111111100000000111111110000000011111111000000001111111100000000) >> 8);
        x = (x & 0B0000000000000000111111111111111100000000000000001111111111111111)
         + ((x & 0B1111111111111111000000000000000011111111111111110000000000000000) >> 16);
        x = (x & 0B0000000000000000000000000000000011111111111111111111111111111111)
         + ((x & 0B1111111111111111111111111111111100000000000000000000000000000000) >> 32);
        return x;
    }
};
/*
int get_value(const SBV<256> &b, const vector<int> &v, int i) {
  if (b.get(i) == false) { return 0; }
  return v[b.rank(i) - 1];
}

signed main() {
    SBV<256> b;
    vector<int> v;

    // 昇順
    b.set(5); v.push_back(10);
    b.set(100); v.push_back(20);
    b.set(180); v.push_back(30);
    b.build();

    cout<<"5:"<<get_value(b,v,5)<<endl;
    cout<<"100:"<<get_value(b,v,100)<<endl;
    cout<<"180:"<<get_value(b,v,180)<<endl;
    cout<<"200:"<<get_value(b,v,200)<<endl;
    return 0;
}
*/